//
// File generated by rootcint at Sat Jul 29 12:35:47 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME VCORSIKARunheader_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "VCORSIKARunheader_Dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void VCORSIKARunheader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VCORSIKARunheader(void *p = 0);
   static void *newArray_VCORSIKARunheader(Long_t size, void *p);
   static void delete_VCORSIKARunheader(void *p);
   static void deleteArray_VCORSIKARunheader(void *p);
   static void destruct_VCORSIKARunheader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VCORSIKARunheader*)
   {
      ::VCORSIKARunheader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VCORSIKARunheader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VCORSIKARunheader", ::VCORSIKARunheader::Class_Version(), "./inc/VCORSIKARunheader.h", 16,
                  typeid(::VCORSIKARunheader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VCORSIKARunheader::Dictionary, isa_proxy, 4,
                  sizeof(::VCORSIKARunheader) );
      instance.SetNew(&new_VCORSIKARunheader);
      instance.SetNewArray(&newArray_VCORSIKARunheader);
      instance.SetDelete(&delete_VCORSIKARunheader);
      instance.SetDeleteArray(&deleteArray_VCORSIKARunheader);
      instance.SetDestructor(&destruct_VCORSIKARunheader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VCORSIKARunheader*)
   {
      return GenerateInitInstanceLocal((::VCORSIKARunheader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VCORSIKARunheader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr VCORSIKARunheader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VCORSIKARunheader::Class_Name()
{
   return "VCORSIKARunheader";
}

//______________________________________________________________________________
const char *VCORSIKARunheader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VCORSIKARunheader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VCORSIKARunheader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VCORSIKARunheader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VCORSIKARunheader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VCORSIKARunheader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VCORSIKARunheader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VCORSIKARunheader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void VCORSIKARunheader::Streamer(TBuffer &R__b)
{
   // Stream an object of class VCORSIKARunheader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(VCORSIKARunheader::Class(),this);
   } else {
      R__b.WriteClassBuffer(VCORSIKARunheader::Class(),this);
   }
}

//______________________________________________________________________________
void VCORSIKARunheader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VCORSIKARunheader.
      TClass *R__cl = ::VCORSIKARunheader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runnumber", &runnumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "production_date", &production_date);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corsika_version", &corsika_version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "observation_level_m", &observation_level_m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particleID", &particleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startingaltitude_gcm2", &startingaltitude_gcm2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tstart", &tstart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy_slope", &energy_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy_min_GeV", &energy_min_GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy_max_GeV", &energy_max_GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zenith_min_deg", &zenith_min_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zenith_max_deg", &zenith_max_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azimuth_min_deg", &azimuth_min_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azimuth_max_deg", &azimuth_max_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "viewcone_min_deg", &viewcone_min_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "viewcone_max_deg", &viewcone_max_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nscatt", &nscatt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xscatt_m", &xscatt_m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yscatt_m", &yscatt_m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cherenkov_flag", &cherenkov_flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cherenkov_bunchsize", &cherenkov_bunchsize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cherenkov_bandwidth_min_nm", &cherenkov_bandwidth_min_nm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cherenkov_bandwidth_max_nm", &cherenkov_bandwidth_max_nm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomagneticfield_arrang_deg", &geomagneticfield_arrang_deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomagneticfield_x_muT", &geomagneticfield_x_muT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomagneticfield_z_muT", &geomagneticfield_z_muT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronic_model_low", &hadronic_model_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronic_model_high", &hadronic_model_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadronic_model_transition_energy_GeV", &hadronic_model_transition_energy_GeV);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VCORSIKARunheader(void *p) {
      return  p ? new(p) ::VCORSIKARunheader : new ::VCORSIKARunheader;
   }
   static void *newArray_VCORSIKARunheader(Long_t nElements, void *p) {
      return p ? new(p) ::VCORSIKARunheader[nElements] : new ::VCORSIKARunheader[nElements];
   }
   // Wrapper around operator delete
   static void delete_VCORSIKARunheader(void *p) {
      delete ((::VCORSIKARunheader*)p);
   }
   static void deleteArray_VCORSIKARunheader(void *p) {
      delete [] ((::VCORSIKARunheader*)p);
   }
   static void destruct_VCORSIKARunheader(void *p) {
      typedef ::VCORSIKARunheader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::VCORSIKARunheader

/********************************************************
* VCORSIKARunheader_Dict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableVCORSIKARunheader_Dict();

extern "C" void G__set_cpp_environmentVCORSIKARunheader_Dict() {
  G__cpp_reset_tagtableVCORSIKARunheader_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevVCORSIKARunheader_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* VCORSIKARunheader */
static int G__VCORSIKARunheader_Dict_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VCORSIKARunheader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VCORSIKARunheader[n];
     } else {
       p = new((void*) gvp) VCORSIKARunheader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VCORSIKARunheader;
     } else {
       p = new((void*) gvp) VCORSIKARunheader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VCORSIKARunheader*) G__getstructoffset())->printHeader(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VCORSIKARunheader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VCORSIKARunheader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VCORSIKARunheader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VCORSIKARunheader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VCORSIKARunheader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VCORSIKARunheader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VCORSIKARunheader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VCORSIKARunheader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__VCORSIKARunheader_Dict_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VCORSIKARunheader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__VCORSIKARunheader_Dict_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VCORSIKARunheader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VCORSIKARunheader(*(VCORSIKARunheader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VCORSIKARunheader G__TVCORSIKARunheader;
static int G__VCORSIKARunheader_Dict_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VCORSIKARunheader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VCORSIKARunheader*) (soff+(sizeof(VCORSIKARunheader)*i)))->~G__TVCORSIKARunheader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VCORSIKARunheader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VCORSIKARunheader*) (soff))->~G__TVCORSIKARunheader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__VCORSIKARunheader_Dict_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VCORSIKARunheader* dest = (VCORSIKARunheader*) G__getstructoffset();
   *dest = *(VCORSIKARunheader*) libp->para[0].ref;
   const VCORSIKARunheader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* VCORSIKARunheader */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncVCORSIKARunheader_Dict {
 public:
  G__Sizep2memfuncVCORSIKARunheader_Dict(): p(&G__Sizep2memfuncVCORSIKARunheader_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncVCORSIKARunheader_Dict::*p)();
};

size_t G__get_sizep2memfuncVCORSIKARunheader_Dict()
{
  G__Sizep2memfuncVCORSIKARunheader_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceVCORSIKARunheader_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader))) {
     VCORSIKARunheader *G__Lderived;
     G__Lderived=(VCORSIKARunheader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader),G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader),G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableVCORSIKARunheader_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* VCORSIKARunheader */
static void G__setup_memvarVCORSIKARunheader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader));
   { VCORSIKARunheader *p; p=(VCORSIKARunheader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->runnumber)-(long)(p)),104,0,0,-1,-1,-1,1,"runnumber=",0,"run number");
   G__memvar_setup((void*)((long)(&p->production_date)-(long)(p)),104,0,0,-1,-1,-1,1,"production_date=",0,"date of simulations");
   G__memvar_setup((void*)((long)(&p->corsika_version)-(long)(p)),102,0,0,-1,-1,-1,1,"corsika_version=",0,"corsika version");
   G__memvar_setup((void*)((long)(&p->observation_level_m)-(long)(p)),102,0,0,-1,-1,-1,1,"observation_level_m=",0,"observation level [m]");
   G__memvar_setup((void*)((long)(&p->particleID)-(long)(p)),104,0,0,-1,-1,-1,1,"particleID=",0,"CORSIKA particle ID");
   G__memvar_setup((void*)((long)(&p->startingaltitude_gcm2)-(long)(p)),102,0,0,-1,-1,-1,1,"startingaltitude_gcm2=",0,"starting altitude [g/cm2]");
   G__memvar_setup((void*)((long)(&p->tstart)-(long)(p)),102,0,0,-1,-1,-1,1,"tstart=",0,"tstart");
   G__memvar_setup((void*)((long)(&p->energy_slope)-(long)(p)),102,0,0,-1,-1,-1,1,"energy_slope=",0,"slope of energy spectrum");
   G__memvar_setup((void*)((long)(&p->energy_min_GeV)-(long)(p)),102,0,0,-1,-1,-1,1,"energy_min_GeV=",0,"lower limit in energy range [GeV]");
   G__memvar_setup((void*)((long)(&p->energy_max_GeV)-(long)(p)),102,0,0,-1,-1,-1,1,"energy_max_GeV=",0,"upper limit in energy range [GeV]");
   G__memvar_setup((void*)((long)(&p->zenith_min_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"zenith_min_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zenith_max_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"zenith_max_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->azimuth_min_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"azimuth_min_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->azimuth_max_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"azimuth_max_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->viewcone_min_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"viewcone_min_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->viewcone_max_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"viewcone_max_deg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nscatt)-(long)(p)),104,0,0,-1,-1,-1,1,"nscatt=",0,"number of uses of each Cherenkov event");
   G__memvar_setup((void*)((long)(&p->xscatt_m)-(long)(p)),102,0,0,-1,-1,-1,1,"xscatt_m=",0,"scatter range in x direction");
   G__memvar_setup((void*)((long)(&p->yscatt_m)-(long)(p)),102,0,0,-1,-1,-1,1,"yscatt_m=",0,"scatter range in y direction");
   G__memvar_setup((void*)((long)(&p->cherenkov_flag)-(long)(p)),107,0,0,-1,-1,-1,1,"cherenkov_flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cherenkov_bunchsize)-(long)(p)),102,0,0,-1,-1,-1,1,"cherenkov_bunchsize=",0,"Cherenkov photon bunch size");
   G__memvar_setup((void*)((long)(&p->cherenkov_bandwidth_min_nm)-(long)(p)),102,0,0,-1,-1,-1,1,"cherenkov_bandwidth_min_nm=",0,"Cherenkov bandwidth lower end");
   G__memvar_setup((void*)((long)(&p->cherenkov_bandwidth_max_nm)-(long)(p)),102,0,0,-1,-1,-1,1,"cherenkov_bandwidth_max_nm=",0,"Cherenkov bandwidth upper end");
   G__memvar_setup((void*)((long)(&p->geomagneticfield_arrang_deg)-(long)(p)),102,0,0,-1,-1,-1,1,"geomagneticfield_arrang_deg=",0,"magnetic field rotation");
   G__memvar_setup((void*)((long)(&p->geomagneticfield_x_muT)-(long)(p)),102,0,0,-1,-1,-1,1,"geomagneticfield_x_muT=",0,"x component of Earths magnetic field in muT");
   G__memvar_setup((void*)((long)(&p->geomagneticfield_z_muT)-(long)(p)),102,0,0,-1,-1,-1,1,"geomagneticfield_z_muT=",0,"z component of Earths magnetic field in muT");
   G__memvar_setup((void*)((long)(&p->hadronic_model_low)-(long)(p)),104,0,0,-1,-1,-1,1,"hadronic_model_low=",0,"low-energy hadr. model flag (1.=GHEISHA, 2.=UrQMD, 3.=FLUKA");
   G__memvar_setup((void*)((long)(&p->hadronic_model_high)-(long)(p)),104,0,0,-1,-1,-1,1,"hadronic_model_high=",0,"0.=HDPM,1.=VENUS, 2.=SIBYLL,3.=QGSJET, 4.=DPMJET, 5.=NEXUS, 6.=EPOS)");
   G__memvar_setup((void*)((long)(&p->hadronic_model_transition_energy_GeV)-(long)(p)),102,0,0,-1,-1,-1,1,"hadronic_model_transition_energy_GeV=",0,"transition energy high-energy/low-energy model (in GeV)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarVCORSIKARunheader_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncVCORSIKARunheader(void) {
   /* VCORSIKARunheader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader));
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VCORSIKARunheader",1536,G__VCORSIKARunheader_Dict_184_0_2, 105, G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printHeader",1142,G__VCORSIKARunheader_Dict_184_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__VCORSIKARunheader_Dict_184_0_4, 85, G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VCORSIKARunheader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__VCORSIKARunheader_Dict_184_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VCORSIKARunheader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__VCORSIKARunheader_Dict_184_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VCORSIKARunheader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__VCORSIKARunheader_Dict_184_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VCORSIKARunheader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__VCORSIKARunheader_Dict_184_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__VCORSIKARunheader_Dict_184_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VCORSIKARunheader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__VCORSIKARunheader_Dict_184_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VCORSIKARunheader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__VCORSIKARunheader_Dict_184_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VCORSIKARunheader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__VCORSIKARunheader_Dict_184_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VCORSIKARunheader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("VCORSIKARunheader", 1536, G__VCORSIKARunheader_Dict_184_0_16, (int) ('i'), G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader), -1, 0, 1, 1, 1, 0, "u 'VCORSIKARunheader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~VCORSIKARunheader", 1662, G__VCORSIKARunheader_Dict_184_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__VCORSIKARunheader_Dict_184_0_18, (int) ('u'), G__get_linked_tagnum(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader), -1, 1, 1, 1, 1, 0, "u 'VCORSIKARunheader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncVCORSIKARunheader_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalVCORSIKARunheader_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcVCORSIKARunheader_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__VCORSIKARunheader_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__VCORSIKARunheader_DictLN_VCORSIKARunheader = { "VCORSIKARunheader" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableVCORSIKARunheader_Dict() {
  G__VCORSIKARunheader_DictLN_TClass.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_TBuffer.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_TMemberInspector.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_TObject.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_TNamed.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__VCORSIKARunheader_DictLN_VCORSIKARunheader.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableVCORSIKARunheader_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__VCORSIKARunheader_DictLN_VCORSIKARunheader),sizeof(VCORSIKARunheader),-1,324864,(char*)NULL,G__setup_memvarVCORSIKARunheader,G__setup_memfuncVCORSIKARunheader);
}
extern "C" void G__cpp_setupVCORSIKARunheader_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupVCORSIKARunheader_Dict()");
  G__set_cpp_environmentVCORSIKARunheader_Dict();
  G__cpp_setup_tagtableVCORSIKARunheader_Dict();

  G__cpp_setup_inheritanceVCORSIKARunheader_Dict();

  G__cpp_setup_typetableVCORSIKARunheader_Dict();

  G__cpp_setup_memvarVCORSIKARunheader_Dict();

  G__cpp_setup_memfuncVCORSIKARunheader_Dict();
  G__cpp_setup_globalVCORSIKARunheader_Dict();
  G__cpp_setup_funcVCORSIKARunheader_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncVCORSIKARunheader_Dict();
  return;
}
class G__cpp_setup_initVCORSIKARunheader_Dict {
  public:
    G__cpp_setup_initVCORSIKARunheader_Dict() { G__add_setup_func("VCORSIKARunheader_Dict",(G__incsetup)(&G__cpp_setupVCORSIKARunheader_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initVCORSIKARunheader_Dict() { G__remove_setup_func("VCORSIKARunheader_Dict"); }
};
G__cpp_setup_initVCORSIKARunheader_Dict G__cpp_setup_initializerVCORSIKARunheader_Dict;

